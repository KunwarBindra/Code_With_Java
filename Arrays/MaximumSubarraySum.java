/*
    Problem Name: Maximum Subarray Sum

    You are given a one dimensional array that may contain both positive and negative integers, 
    find the sum of contiguous subarray of numbers which has the largest sum. 
    For example, if the given array is {-2, -5, 6, -2, -3, 1, 5, -6}, 
    then the maximum subarray sum is 7.



    Input Format: The first line consists of number of test cases T. Each test case consists of two lines.
                  The first line of each testcase contains a single integer N denoting the number of elements for the array A.
                  The second line of each testcase contains N space separated integers denoting the elements of the array.

    Constraints: 1 <= N <= 100000
                 1 <= t <= 20
                 -100000000 <= A[i] <= 100000000

    Output Format: Output a single integer denoting the maximum subarray sum for each testcase in a new line.

    Sample Input:   2
                    4
                    1 2 3 4
                    3
                   -10 5 10

    Sample Output:  10
                    15

    Explanation: For the first testcase, 
                 maximum subarray sum is generated by the entire array - 1+2+3+4 = 10
                 For the second testcase , 
                 maximum subarray sum is generated by the subarray {5,10} - 5+10 = 15

*/
package Arrays;
import java.util.Scanner;
public class MaximumSubarraySum {
    public static void main(String []args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int [] arr1 = new int[N];
        for(int i=0; i<N; i++) {
            arr1[i] = sc.nextInt();
        }
        // kadane's algorithm
        int currentSum = 0;
        int maximumSum = 0;
        for(int i=0; i<arr1.length; i++) {
            currentSum += arr1[i];
            if (currentSum < 0) {
                currentSum = 0;
            }
            if (currentSum > maximumSum) {
                maximumSum = currentSum;
            }
        }
        System.out.println(maximumSum);
    }
}
